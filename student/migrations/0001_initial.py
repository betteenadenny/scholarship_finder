# Generated by Django 4.2.7 on 2023-12-02 15:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('type', models.CharField(choices=[('Private', 'Private'), ('Government', 'Government'), ('Central Government', 'Central Government')], help_text=' the types of scholarships you are interested in.', max_length=20)),
                ('category', models.CharField(choices=[('Sports', 'Sports'), ('Academics', 'Academics'), ('Other', 'Other')], max_length=20)),
                ('annual_income', models.CharField(choices=[('Less than 100000', 'Less than 100000'), ('Less than 500000', '100000 - 500000'), ('Less than 1000000', '500000 - 1000000'), ('Less than 1000000', 'More than 1000000'), ('Not applicable', 'Not applicable')], max_length=20)),
                ('degree_type', models.CharField(choices=[('Undergraduate', 'Undergraduate'), ('Postgraduate', 'Postgraduate'), ('PhD/Doctorate', 'PhD/Doctorate'), ('Diploma', 'Diploma'), ('Other', 'Other')], help_text='Curreny degree you are pursuing ', max_length=20)),
                ('major', models.CharField(choices=[('Engineering', 'Engineering'), ('Science', 'Science'), ('Arts', 'Arts'), ('Computer Science', 'Computer Science'), ('Other', 'Other')], max_length=20)),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='student_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='student_user_permissions', related_query_name='student_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('can_add_student', 'Can add Student')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
